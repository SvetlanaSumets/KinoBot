from more_itertools import unique_everseen
import telebot
import threading
import database
import schedule
import ticket
import congestion_hall
import hallshow
import telegram
import datetime

TOKEN = '1194717790:AAETJV4ooKmDHhWsv6n1qAJUMUxv7d-kfxw'
bot = telebot.TeleBot(TOKEN)


# –í—ã–±–æ—Ä –¥–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def choose_date(call) -> None:
	username = '@' + call.from_user.username

	keyboard = telebot.types.InlineKeyboardMarkup()
	Date = list(unique_everseen([session[1] for session in schedule.filter(Film=database.get_current_film(username), Date='', Time=database.get_current_time(username), order_by = lambda x: x[1])]))

	for i in range(1, len(Date), 2):
		Date_left = Date[i - 1]
		Date_right = Date[i]
		button_left = telebot.types.InlineKeyboardButton(text='üìÜ   '+Date_left.strftime(database.date_format)+'   üìÜ', callback_data='choosen_date_' + Date_left.strftime(database.date_format))
		button_right = telebot.types.InlineKeyboardButton(text='üìÜ   '+Date_right.strftime(database.date_format)+'   üìÜ', callback_data='choosen_date_' + Date_right.strftime(database.date_format))
		keyboard.add(*[button_left, button_right])
	if len(Date) % 2:
		temp = Date[-1]
		keyboard.add(telebot.types.InlineKeyboardButton(text='üìÜ   '+temp.strftime(database.date_format)+'   üìÜ', callback_data='choosen_date_' + temp.strftime(database.date_format)))

	if database.get_current_film(username) != '':
		keyboard.add(telebot.types.InlineKeyboardButton(text='üîô   –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ñ–∏–ª—å–º–æ–≤   üé•', callback_data='choose_film'))
		keyboard.add(telebot.types.InlineKeyboardButton(text='‚úñÔ∏è   –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ   ‚úñÔ∏è', callback_data='main_menu'))
	elif database.get_current_film(username) == '':
		keyboard.add(telebot.types.InlineKeyboardButton(text='üîô   –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é   üìã', callback_data='main_menu'))
	
	if database.get_current_film(username) == '':
		bot.send_message(call.message.chat.id, text="–ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ –¥–∞—Ç —Å–µ–∞–Ω—Å–æ–≤, –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –¥–ª—è —Å–µ–±—è –¥–µ–Ω—å:", reply_markup=keyboard)
	elif database.get_current_film(username) != '':
		bot.send_message(call.message.chat.id, text=f"–ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ –¥–∞—Ç —Å–µ–∞–Ω—Å–æ–≤\n üîπ –Ω–∞ —Ñ–∏–ª—å–º {database.get_current_film(username)}\n–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –¥–ª—è —Å–µ–±—è –¥–µ–Ω—å:", reply_markup=keyboard)


# –í—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def choose_film(call) -> None:
	username = '@' + call.from_user.username

	keyboard = telebot.types.InlineKeyboardMarkup()
	List = [session[0] for session in schedule.filter(Film='', Date=database.get_current_date(username), Time=database.get_current_time(username), order_by = lambda x: x[0])]
	for Film in list(unique_everseen(List)):
		keyboard.add(telebot.types.InlineKeyboardButton(text='üé•   '+Film+'   üé•', callback_data='choosen_film_' + Film))

	if database.get_current_date(username) != '':
		keyboard.add(telebot.types.InlineKeyboardButton(text='üîô   –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –¥–∞—Ç   üìÖ', callback_data='choose_date'))
		keyboard.add(telebot.types.InlineKeyboardButton(text='‚úñÔ∏è   –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ   ‚úñÔ∏è', callback_data='main_menu'))
	elif database.get_current_date(username) == '':
		keyboard.add(telebot.types.InlineKeyboardButton(text='üîô   –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é   üìã', callback_data='main_menu'))
	
	if database.get_current_date(username) == '':
		bot.send_message(call.message.chat.id, text="–ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, –≤—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –∏ –ø–æ–ª—É—á–∏—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º:", reply_markup=keyboard)
	elif database.get_current_date(username) != '':
		bot.send_message(call.message.chat.id, text=f"–ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤\n üîπ –Ω–∞ {database.get_current_date(username)} —á–∏—Å–ª–æ\n–í—ã–±–µ—Ä–∏ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –∏ –ø–æ–ª—É—á–∏—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º:", reply_markup=keyboard)


# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def choose_time(call) -> None:
	username = '@' + call.from_user.username

	keyboard = telebot.types.InlineKeyboardMarkup() 
	Date = datetime.datetime.strptime(database.get_current_date(username), database.date_format).date()
	Film = database.get_current_film(username)
	session = schedule.is_session_exist(lambda x: x == Film, lambda x: x == Date) 
	Hall = session[0][-1] 
	
	List = [session[2] for session in schedule.filter(Film=database.get_current_film(username), Date=database.get_current_date(username), Time='', order_by = lambda x: x[2])]

	for Time in list(unique_everseen(List)):
		BUSY = schedule.get_is_busy(Date, Time, Hall)
		if not schedule.is_hall_filled(BUSY):
			keyboard.add(telebot.types.InlineKeyboardButton(text='‚è∞   '+Time.strftime(database.time_format)+' ‚Äî '+schedule.price_list(Date, Time)+' –≥—Ä–Ω   üí∞', callback_data='choosen_time_' + Time.strftime(database.time_format)))
	keyboard.add(telebot.types.InlineKeyboardButton(text='‚§¥Ô∏è   –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º   üé•', callback_data='choose_film'))
	keyboard.add(telebot.types.InlineKeyboardButton(text='‚§¥Ô∏è   –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É   üìÖ', callback_data='choose_date'))
	keyboard.add(telebot.types.InlineKeyboardButton(text='‚úñÔ∏è   –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ   ‚úñÔ∏è', callback_data='main_menu'))

	text = f"–ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–∞–Ω—Å–æ–≤\n üîπ –Ω–∞ {database.get_current_date(username)} —á–∏—Å–ª–æ\n üîπ –Ω–∞ —Ñ–∏–ª—å–º {Film}\n–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –¥–ª—è —Å–µ–±—è –≤—Ä–µ–º—è\n–£—á–∏—Ç—ã–≤–∞–π —Ç–æ, —á—Ç–æ —Ü–µ–Ω–∞ –≤ –±—É–¥–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ —Ä–∞–∑–Ω–∏—Ç—Å—è, —Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–∞–Ω—Å–∞:\n üî∫ –ü–Ω - –ü—Ç 9:00 - 18:00:    60 –≥—Ä–Ω\n üî∫ –ü–Ω - –ü—Ç –ø–æ–∑–∂–µ 18:00:  70 –≥—Ä–Ω\n üî∫ –°–± - –í—Å 9:00 - 18:00:    70 –≥—Ä–Ω\n üî∫ –°–± - –í—Å –ø–æ–∑–∂–µ 18:00:   80 –≥—Ä–Ω\n–£—á–∏—Ç—ã–≤–∞–π —Å—Ä–µ–¥–Ω—é—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å–µ–∞–Ω—Å–∞ (–≥—Ä–∞—Ñ–∏–∫ –≤—ã—à–µ)."
	photo = open(congestion_hall.return_congestion_hall(Date, Film, username), 'rb')
	bot.send_photo(call.message.chat.id, photo, text, reply_markup=keyboard)


# –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def booking(call) -> None:
	username = '@' + call.from_user.username

	keyboard = telebot.types.InlineKeyboardMarkup() 
	Date = datetime.datetime.strptime(database.get_current_date(username), database.date_format).date()
	Time = datetime.datetime.strptime(database.get_current_time(username), database.time_format).time()
	Film = database.get_current_film(username)
	Price = schedule.price_list(Date, Time)

	keyboard.add(telebot.types.InlineKeyboardButton(text='üçø   –í—ã–±—Ä–∞—Ç—å —Ä—è–¥ –∏ –º–µ—Å—Ç–æ   üéû', callback_data='choose_row'))
	keyboard.add(telebot.types.InlineKeyboardButton(text='‚§¥Ô∏è   –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è   ‚è∞', callback_data='choose_time'))
	keyboard.add(telebot.types.InlineKeyboardButton(text='‚úñÔ∏è   –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ   ‚úñÔ∏è', callback_data='main_menu'))

	bot.send_message(call.message.chat.id, text = f"–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª —Å–µ–∞–Ω—Å\n üîπ –Ω–∞ {database.get_current_date(username)} —á–∏—Å–ª–æ\n üîπ –Ω–∞ —Ñ–∏–ª—å–º {Film}\n üîπ –Ω–∞ –≤—Ä–µ–º—è {database.get_current_time(username)}\n üîπ –ø–æ —Ü–µ–Ω–µ {Price} –≥—Ä–Ω\n–ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–∞ –≤ –∑–∞–ª–µ.\n üî∫ –ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ä—è–¥–∞ –∏ –º–µ—Å—Ç–∞.\n üî∫ E—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–∞–º –∂–µ —Ç—ã —Å–º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞ –∏ –¥–∞—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ).", reply_markup=keyboard)


# –í—ã–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—è–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def choose_row(call) -> None:
	username = '@' + call.from_user.username

	keyboard = telebot.types.InlineKeyboardMarkup() 
	Date = datetime.datetime.strptime(database.get_current_date(username), database.date_format).date()
	Time = datetime.datetime.strptime(database.get_current_time(username), database.time_format).time()
	Film = database.get_current_film(username)
	session = schedule.is_session_exist(lambda x: x == Film, lambda x: x == Date, lambda x: x == Time) 
	Hall = session[0][-1] 
	Row = database.get_current_row(username)
	Col = database.get_current_col(username)
	Price = schedule.price_list(Date, Time)
	BUSY = schedule.get_is_busy(Date, Time, Hall)

	free_hall_row = []
	for i in range(schedule.SIZE[Hall][0]):
		if not schedule.is_row_busy(BUSY, i):
			free_hall_row.append(i+1)
		else:
			pass

	for i in range(2, len(free_hall_row), 3):
		row_left = free_hall_row[i-2]
		row_center = free_hall_row[i-1]
		row_right = free_hall_row[i]
		button_left = telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {row_left}   ‚ñ™Ô∏è', callback_data=f'choosen_row_{row_left}')
		button_center = telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {row_center}   ‚ñ™Ô∏è', callback_data=f'choosen_row_{row_center}')
		button_right = telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {row_right}   ‚ñ™Ô∏è', callback_data=f'choosen_row_{row_right}')
		keyboard.add(*[button_left, button_center, button_right])

	if len(free_hall_row) % 3 == 2:
		row_left_1 = free_hall_row[-2]
		row_right_1 = free_hall_row[-1]
		button_left_1 = telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {row_left_1}   ‚ñ™Ô∏è', callback_data=f'choosen_row_{row_left_1}')
		button_right_1 = telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {row_right_1}   ‚ñ™Ô∏è', callback_data=f'choosen_row_{row_right_1}')
		keyboard.add(*[button_left_1, button_right_1])

	elif len(free_hall_row) % 3 == 1:
		temp = free_hall_row[-1]
		keyboard.add(telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {temp}   ‚ñ™Ô∏è', callback_data=f'choosen_row_{temp}'))

	choosen ='\n‚úÖ –£–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã:'
	if Row != [] and Col != []:
		for i in range(len(Row)):
			choosen += f'\n üë• –†—è–¥: {Row[i]}\n üë§ –ú–µ—Å—Ç–æ: {Col[i]}\n'
	else:
		choosen =''

	if Row == []:
		keyboard.add(telebot.types.InlineKeyboardButton(text='üîô   –ù–∞–∑–∞–¥   ‚è∞', callback_data='booking'))
	elif Row != []:
		keyboard.add(telebot.types.InlineKeyboardButton(text='‚úñÔ∏è   –†–∞–∑–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–∞   ‚úñÔ∏è', callback_data='booking_unbook'))
	
	text = f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n üîπ –î–∞—Ç–∞: {database.get_current_date(username)}\n üîπ –§–∏–ª—å–º: {Film}\n üîπ –í—Ä–µ–º—è: {database.get_current_time(username)}\n üîπ –ó–∞–ª: {Hall}\n üîπ –¶–µ–Ω–∞: {Price} –≥—Ä–Ω\n{choosen}\n–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –∑–∞–ª\n üî∫ –∑–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞ - —Ç—É—Å–∫–ª—ã–µ –∫–ª–µ—Ç–∫–∏;\n üî∫ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ - –≥–æ–ª—É–±—ã–µ –∫–ª–µ—Ç–∫–∏.\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ä—è–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
	photo = open(hallshow.return_hallshow(Date, Time, Film, username), 'rb')
	bot.send_photo(call.message.chat.id, photo, text, reply_markup=keyboard)


# –í—ã–±–æ—Ä –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def choose_col(call) -> None:
	username = '@' + call.from_user.username

	keyboard = telebot.types.InlineKeyboardMarkup() 
	Date = datetime.datetime.strptime(database.get_current_date(username), database.date_format).date()
	Time = datetime.datetime.strptime(database.get_current_time(username), database.time_format).time()
	Film = database.get_current_film(username)
	Row = database.get_current_row(username)
	Col = database.get_current_col(username)
	session = schedule.is_session_exist(lambda x: x == Film, lambda x: x == Date, lambda x: x == Time) 
	Hall = session[0][-1] 
	Price = schedule.price_list(Date, Time)
	BUSY = schedule.get_is_busy(Date, Time, Hall)

	free_hall_col = []
	for col in range(schedule.SIZE[Hall][1]):
		if not schedule.is_site_busy(BUSY, Row[-1] - 1, col):
			free_hall_col.append(col + 1)
		else:
			pass

	for i in range(2, len(free_hall_col), 3):
		col_left = free_hall_col[i-2]
		col_center = free_hall_col[i-1]
		col_right = free_hall_col[i]
		button_left = telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {col_left}   ‚ñ™Ô∏è', callback_data=f'choosen_col_{col_left}')
		button_center = telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {col_center}   ‚ñ™Ô∏è', callback_data=f'choosen_col_{col_center}')
		button_right = telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {col_right}   ‚ñ™Ô∏è', callback_data=f'choosen_col_{col_right}')
		keyboard.add(*[button_left, button_center, button_right])
	
	if len(free_hall_col) % 3 == 2:
		col_left_1 = free_hall_col[-2]
		col_right_1 = free_hall_col[-1]
		button_left_1 = telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {col_left_1}   ‚ñ™Ô∏è', callback_data=f'choosen_col_{col_left_1}')
		button_right_1 = telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {col_right_1}   ‚ñ™Ô∏è', callback_data=f'choosen_col_{col_right_1}')
		keyboard.add(*[button_left_1, button_right_1])

	elif len(free_hall_col) % 3 == 1:
		temp = free_hall_col[-1]
		keyboard.add(telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {temp}   ‚ñ™Ô∏è', callback_data=f'choosen_col_{temp}'))

	choosen ='\n‚úÖ –£–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã:'
	if Col != []:
		for i in range(len(Col)):
			choosen += f'\n üë• –†—è–¥: {Row[i]}\n üë§ –ú–µ—Å—Ç–æ: {Col[i]}\n'
	else:
		choosen =''

	keyboard.add(telebot.types.InlineKeyboardButton(text='üîô   –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å —Ä—è–¥   üë•', callback_data='choose_row'))
	if Col ==[]:
		keyboard.add(telebot.types.InlineKeyboardButton(text='‚úñÔ∏è   –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç   ‚úñÔ∏è', callback_data='booking'))
	
	text = f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n üîπ –î–∞—Ç–∞: {database.get_current_date(username)}\n üîπ –§–∏–ª—å–º: {Film}\n üîπ –í—Ä–µ–º—è: {database.get_current_time(username)}\n üîπ –ó–∞–ª: {Hall}\n üîπ –¶–µ–Ω–∞: {Price} –≥—Ä–Ω\n{choosen}\n üë• –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä—è–¥: {Row[-1]}\n\n–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –∑–∞–ª\n üî∫ –∑–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä—è–¥—É - —Ç—É—Å–∫–ª—ã–µ –∫–ª–µ—Ç–∫–∏;\n üî∫ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä—è–¥—É - –æ—Ä–∞–Ω–∂–µ–≤—ã–µ –∫–ª–µ—Ç–∫–∏.\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
	photo = open(hallshow.return_hallshow(Date, Time, Film, username, [Row[-1]]), 'rb')
	bot.send_photo(call.message.chat.id, photo, text, reply_markup=keyboard)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def to_book_site(call) -> None:
	username = '@' + call.from_user.username

	keyboard = telebot.types.InlineKeyboardMarkup() 
	Date = datetime.datetime.strptime(database.get_current_date(username), database.date_format).date()
	Time = datetime.datetime.strptime(database.get_current_time(username), database.time_format).time()
	Film = database.get_current_film(username)
	Row = database.get_current_row(username)
	Col = database.get_current_col(username)
	session = schedule.is_session_exist(lambda x: x == Film, lambda x: x == Date, lambda x: x == Time) 
	print(session)
	Hall = session[0][-1] 
	Price = schedule.price_list(Date, Time)
	BUSY = schedule.get_is_busy(Date, Time, Hall)

	choosen ='\n‚úÖ –£–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã:'
	if len(Row) != 1:
		for i in range(len(Row)-1):
			choosen += f'\n üë• –†—è–¥: {Row[i]}\n üë§ –ú–µ—Å—Ç–æ: {Col[i]}\n'
	else:
		choosen = ''

	keyboard.add(telebot.types.InlineKeyboardButton(text=f'‚úÖ   –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ –º–µ—Å—Ç–æ   üë§', callback_data='book_and_choose_row'))
	keyboard.add(telebot.types.InlineKeyboardButton(text=f'‚úÖ   –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å   üîú', callback_data='book_and_continue'))
	keyboard.add(telebot.types.InlineKeyboardButton(text=f'üîô   –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ –≤ {Row[-1]} —Ä—è–¥—É   üë§', callback_data='choose_col'))
	keyboard.add(telebot.types.InlineKeyboardButton(text=f'üîô   –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å —Ä—è–¥   üë•', callback_data='rechoose_row'))
	if len(Row) == 1:
		keyboard.add(telebot.types.InlineKeyboardButton(text='‚úñÔ∏è   –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç   ‚úñÔ∏è', callback_data='booking'))
	else:
		keyboard.add(telebot.types.InlineKeyboardButton(text='‚úñÔ∏è   –°–±—Ä–æ—Å–∏—Ç—å –∏ —Ä–∞–∑–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–∞   ‚úñÔ∏è', callback_data='booking_unbook_part'))
	keyboard.add(telebot.types.InlineKeyboardButton(text='‚úñÔ∏è   –°–±—Ä–æ—Å –≤—Å–µ–≥–æ   ‚úñÔ∏è', callback_data='main_menu_unbook_part'))
	
	text = f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n üîπ –î–∞—Ç–∞: {database.get_current_date(username)}\n üîπ –§–∏–ª—å–º: {Film}\n üîπ –í—Ä–µ–º—è: {database.get_current_time(username)}\n üîπ –ó–∞–ª: {Hall}\n üîπ –¶–µ–Ω–∞: {Price} –≥—Ä–Ω\n {choosen}\nüë• –¢–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä—è–¥: {Row[-1]}\nüë§ –¢–µ–∫—É—â–µ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ: {Col[-1]}"
	photo = open(hallshow.return_hallshow(Date, Time, Film, username, [Row[-1]], [Col[-1]]), 'rb')
	bot.send_photo(call.message.chat.id, photo, text, reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏
def data_checking(call) -> None:
	username = '@' + call.from_user.username

	keyboard = telebot.types.InlineKeyboardMarkup() 
	Date = datetime.datetime.strptime(database.get_current_date(username), database.date_format).date()
	Time = datetime.datetime.strptime(database.get_current_time(username), database.time_format).time()
	Film = database.get_current_film(username)
	Row = database.get_current_row(username)
	Col = database.get_current_col(username)
	session = schedule.is_session_exist(lambda x: x == Film, lambda x: x == Date, lambda x: x == Time) 
	Hall = session[0][-1] 
	Price = schedule.price_list(Date, Time)
	BUSY = schedule.get_is_busy(Date, Time, Hall)

	choosen ='\n'
	check = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç:\n'
	for i in range(len(Row)):
		choosen += f'\n üë• –†—è–¥: {Row[i]}\n üë§ –ú–µ—Å—Ç–æ: {Col[i]}\n'
		check += f'üë• –†—è–¥: {Row[i]}; üë§ –ú–µ—Å—Ç–æ: {Col[i]} ‚Äî –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã {schedule.is_site_busy_whom2(Date, Time, Hall, Row[i]-1, Col[i]-1)}\n'
	check += '\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ.\n üî∫ –ï—Å–ª–∏ –≤—Å–µ –æ–∫, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n üî∫ –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π username –Ω–µ —Ç–≤–æ–π, –∏–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ–∞–Ω—Å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç.\n üî∫ –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö.'

	keyboard.add(telebot.types.InlineKeyboardButton(text='‚úÖ   –í—Å–µ –æ–∫, –∑–∞–≤–µ—Ä—à–∏—Ç—å   ‚úÖ', callback_data='the_end'))
	keyboard.add(telebot.types.InlineKeyboardButton(text='‚úñÔ∏è   –†–∞–∑–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–∞ –∏ –≤—ã–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞   ‚úñÔ∏è', callback_data='booking_unbook'))
	keyboard.add(telebot.types.InlineKeyboardButton(text='‚úñÔ∏è   –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ —Ä–∞–∑–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å   ‚úñÔ∏è', callback_data='main_menu_unbook'))
	
	text = f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n üîπ –î–∞—Ç–∞: {database.get_current_date(username)}\n üîπ –§–∏–ª—å–º: {Film}\n üîπ –í—Ä–µ–º—è: {database.get_current_time(username)}\n üîπ –ó–∞–ª: {Hall}\n üîπ –¶–µ–Ω–∞: {Price} –≥—Ä–Ω{choosen}\n{check}"
	photo = open(hallshow.return_hallshow(Date, Time, Film, username, Row, Col), 'rb')
	bot.send_photo(call.message.chat.id, photo, text, reply_markup=keyboard)


# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª—å–º–∞
def pol_rating(call) -> None:
	username = '@' + call.from_user.username
	keyboard = telebot.types.InlineKeyboardMarkup() 

	rating = ['1Ô∏è‚É£','2Ô∏è‚É£','3Ô∏è‚É£','4Ô∏è‚É£','5Ô∏è‚É£','6Ô∏è‚É£','7Ô∏è‚É£','8Ô∏è‚É£','9Ô∏è‚É£','üîü']
	rat = [1,2,3,4,5,6,7,8,9,'d']

	data = database.history_date_time_film(username)
	row = data[-1]
	Film = row[-1]

	for i in range(2, len(rating), 3):
		left = rating[i-2]
		left_i = rat[i-2]
		center = rating[i-1]
		center_i = rat[i-1]
		right = rating[i]
		right_i = rat[i]
		button_left = telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {left}   ‚ñ™Ô∏è', callback_data=f'choosen_rating_{left_i}_{Film}')
		button_center = telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {center}   ‚ñ™Ô∏è', callback_data=f'choosen_rating_{center_i}_{Film}')
		button_right = telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {right}   ‚ñ™Ô∏è', callback_data=f'choosen_rating_{right_i}_{Film}')
		keyboard.add(*[button_left, button_center, button_right])

	temp = rating[-1]
	temp_i = rat[-1]
	keyboard.add(telebot.types.InlineKeyboardButton(text=f'‚ñ™Ô∏è   {temp}   ‚ñ™Ô∏è', callback_data=f'choosen_rating_{temp_i}_{Film}'))
	keyboard.add(telebot.types.InlineKeyboardButton(text='‚òπÔ∏è   –Ø –Ω–µ —Ö–æ—á—É –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å   ‚òπÔ∏è', callback_data='not_rating'))
	bot.send_message(call.message.chat.id, text=f"–ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–∞ {Film}\n–û—Ü–µ–Ω–∏, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —ç—Ç–æ—Ç —Ñ–∏–ª—å–º", reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏
def the_end(call) -> None:
	username = '@' + call.from_user.username

	keyboard = telebot.types.InlineKeyboardMarkup() 
	Date = datetime.datetime.strptime(database.get_current_date(username), database.date_format).date()
	Time = datetime.datetime.strptime(database.get_current_time(username), database.time_format).time()
	Film = database.get_current_film(username)
	Row = database.get_current_row(username)
	Col = database.get_current_col(username)
	session = schedule.is_session_exist(lambda x: x == Film, lambda x: x == Date, lambda x: x == Time) 
	Hall = session[0][-1] 
	Price = schedule.price_list(Date, Time)

	keyboard.add(telebot.types.InlineKeyboardButton(text=f'‚úñÔ∏è   –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –±—Ä–æ–Ω–∏   ‚úñÔ∏è', callback_data=f'cancellation'))
	keyboard.add(telebot.types.InlineKeyboardButton(text=f'üîÑ   –í—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ   üîÑ', callback_data=f'start_call'))
	text = f"–°–ø–∞—Å–∏–±–æ, –∂–¥—É —Ç–µ–±—è üòâ\n"
	photo = open(ticket.return_ticket(Date, Time, Film, Hall, Price, username, Row, Col), 'rb')
	bot.delete_message(call.message.chat.id, call.message.message_id)
	bot.send_photo(call.message.chat.id, photo, text, reply_markup=keyboard)

	pol_rating(call)


# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete(call) -> None:
	username = '@' + call.from_user.username

	if not username:
		bot.send_message(call.message.chat.id, '–ü—Ä–æ—Å—Ç–∏, –Ω–æ —Ç–≤–æ–µ –∏–º—è @User –Ω–µ –∑–∞–¥–∞–Ω–æ. –ó–∞–¥–∞–π —Å–≤–æ–π username')
		return

	if not database.is_user_exist(username):
		bot.send_message(call.message.chat.id, '–ü—Ä–æ—Å—Ç–∏, —Ç—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
	else:
		keyboard = telebot.types.InlineKeyboardMarkup()
		keyboard.add(telebot.types.InlineKeyboardButton(text='ü§™   –î–∞–∞–∞–∞   ü§™', callback_data='bye_yes'))
		keyboard.add(telebot.types.InlineKeyboardButton(text='ü§™   –ù–µ–µ–µ—Ç   ü§™', callback_data='bye_no'))
		bot.send_message(call.message.chat.id, '–•–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–µ –∏–º—è –∏–∑ –º–æ–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö?', reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–ª–µ—Ça
@bot.message_handler(commands=['unbook'])
def unbook(message) -> None:
	username = '@' + message.from_user.username
	keyboard = telebot.types.InlineKeyboardMarkup()

	List = schedule.history_actually(username) 
	if List != []:
		Text=''
		for i in range(len(List)):
			Text += f'{i+1}). –§–∏–ª—å–º: {List[i][4]}\n –î–∞—Ç–∞: {List[i][0]}\n –í—Ä–µ–º—è: {List[i][1]}\n –†—è–¥: {List[i][2]}\n –ú–µ—Å—Ç–æ: {List[i][3]}\n\n'
			keyboard.add(telebot.types.InlineKeyboardButton(text=f'{i+1}', callback_data=f'unbook_{List[i][0]}_{List[i][1]}_{List[i][2]}_{List[i][3]}'))
		bot.send_message(message.chat.id, Text, reply_markup=keyboard)
	else:
		bot.send_message(message.chat.id, 'üôÉ –£ —Ç–µ–±—è –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö/–Ω–µ–ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–µ–π')


# –§—É–Ω–∫—Ü–∏—è —Ç–µ–∫—É—â–∏—Ö –±—Ä–æ–Ω–µ–π
@bot.message_handler(commands=['reservation'])
def reservation(message) -> None:
	username = '@' + message.from_user.username
	keyboard = telebot.types.InlineKeyboardMarkup()

	List = schedule.history_actually(username) 
	if List != []:
		Text=''
		for i in range(len(List)):
			Text += f'{i+1}). –§–∏–ª—å–º: {List[i][4]}\n –î–∞—Ç–∞: {List[i][0]}\n –í—Ä–µ–º—è: {List[i][1]}\n –†—è–¥: {List[i][2]}\n –ú–µ—Å—Ç–æ: {List[i][3]}\n\n'
		bot.send_message(message.chat.id, Text)
	else:
		bot.send_message(message.chat.id, 'üôÉ –£ —Ç–µ–±—è –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö/–Ω–µ–ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–µ–π')


# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def unbook_end(call) -> None:
	username = '@' + call.from_user.username
	keyboard = telebot.types.InlineKeyboardMarkup()

	List = schedule.history_actually(username) 
	if List != []:
		Text=''
		for i in range(len(List)):
			Text += f'{i+1}). –§–∏–ª—å–º: {List[i][4]}\n –î–∞—Ç–∞: {List[i][0]}\n –í—Ä–µ–º—è: {List[i][1]}\n –†—è–¥: {List[i][2]}\n –ú–µ—Å—Ç–æ: {List[i][3]}\n\n'
			keyboard.add(telebot.types.InlineKeyboardButton(text=f'{i+1}', callback_data=f'unbook_{List[i][0]}_{List[i][1]}_{List[i][2]}_{List[i][3]}'))
		bot.send_message(call.message.chat.id, Text, reply_markup=keyboard)
	else:
		bot.send_message(call.message.chat.id, 'üôÉ –£ —Ç–µ–±—è –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö/–Ω–µ–ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–µ–π')


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(call) -> None:
	username = '@' + call.from_user.username

	keyboard = telebot.types.InlineKeyboardMarkup()
	keyboard.add(telebot.types.InlineKeyboardButton(text='üìÖ   –î–∞—Ç—ã —Å–µ–∞–Ω—Å–æ–≤   üìÖ', callback_data='choose_date'))
	keyboard.add(telebot.types.InlineKeyboardButton(text='üé¨   –°–µ–π—á–∞—Å –≤ –ø—Ä–æ–∫–∞—Ç–µ   üé¨', callback_data='choose_film'))
	bot.send_message(call.message.chat.id, text="–î–ª—è –Ω–∞—á–∞–ª–∞ —É —Ç–µ–±—è –µ—Å—Ç—å –≤—ã–±–æ—Ä:\n üî∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∞—Ç—ã —Å–µ–∞–Ω—Å–æ–≤ –∏ —Ñ–∏–ª—å–º—ã –≤ —ç—Ç–∏ –¥–Ω–∏;\n üî∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã, —á—Ç–æ —Å–µ–π—á–∞—Å –≤ –ø—Ä–æ–∫–∞—Ç–µ, –∏ –¥–∞—Ç—ã –∏—Ö –ø–æ–∫–∞–∑–∞.", reply_markup=keyboard)
		



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# –î–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
	username = '@' + call.from_user.username

	if call.data == 'main_menu':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		database.clean_current_date(username)
		database.clean_current_film(username)
		database.clean_current_time(username)
		database.clean_current_row(username)
		database.clean_current_col(username)
		main_menu(call)


	elif call.data == 'main_menu_unbook':
		Date = datetime.datetime.strptime(database.get_current_date(username), database.date_format).date()
		Time = datetime.datetime.strptime(database.get_current_time(username), database.time_format).time()
		Film = database.get_current_film(username)
		Row = database.get_current_row(username)
		Col = database.get_current_col(username)
		session = schedule.is_session_exist(lambda x: x == Film, lambda x: x == Date, lambda x: x == Time) 
		Hall = session[0][-1] 

		bot.delete_message(call.message.chat.id, call.message.message_id)
		bot.send_message(call.message.chat.id, text="‚ùå –¢—ã —Å–±—Ä–æ—Å–∏–ª –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ä–∞–∑–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –≤—Å–µ –º–µ—Å—Ç–∞")

		for i in range(len(Row)):
			schedule.unbook(Date, Time, Row[i], Col[i], username, Hall)
			database.delete_user_history(username, Date, Time, Hall, Row[i], Col[i], Film)

		database.clean_current_date(username)
		database.clean_current_film(username)
		database.clean_current_time(username)
		database.clean_current_row(username)
		database.clean_current_col(username)
		main_menu(call)


	elif call.data == 'main_menu_unbook_part':
		Date = datetime.datetime.strptime(database.get_current_date(username), database.date_format).date()
		Time = datetime.datetime.strptime(database.get_current_time(username), database.time_format).time()
		Film = database.get_current_film(username)
		Row = database.get_current_row(username)
		Col = database.get_current_col(username)
		session = schedule.is_session_exist(lambda x: x == Film, lambda x: x == Date, lambda x: x == Time) 
		Hall = session[0][-1] 

		bot.delete_message(call.message.chat.id, call.message.message_id)
		if len(Row)!=1:
			bot.send_message(call.message.chat.id, text="‚ùå –¢—ã —Å–±—Ä–æ—Å–∏–ª –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ä–∞–∑–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –≤—Å–µ –º–µ—Å—Ç–∞")
		else:
			bot.send_message(call.message.chat.id, text="‚ùå –¢—ã —Å–±—Ä–æ—Å–∏–ª –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")	

		for i in range(len(Row)-1):
			schedule.unbook(Date, Time, Row[i], Col[i], username, Hall)
			database.delete_user_history(username, Date, Time, Hall, Row[i], Col[i], Film)

		database.clean_current_date(username)
		database.clean_current_film(username)
		database.clean_current_time(username)
		database.clean_current_row(username)
		database.clean_current_col(username)
		main_menu(call)


	elif call.data == 'choose_date':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		choose_date(call)


	elif call.data == 'choose_film':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		choose_film(call)


	elif call.data == 'choose_time':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		database.clean_current_time(username)
		choose_time(call)


	elif call.data == 'booking':
		database.clean_current_row(username)
		database.clean_current_col(username)
		bot.delete_message(call.message.chat.id, call.message.message_id)
		booking(call)


	elif call.data == 'booking_unbook':
		Date = datetime.datetime.strptime(database.get_current_date(username), database.date_format).date()
		Time = datetime.datetime.strptime(database.get_current_time(username), database.time_format).time()
		Film = database.get_current_film(username)
		Row = database.get_current_row(username)
		Col = database.get_current_col(username)
		session = schedule.is_session_exist(lambda x: x == Film, lambda x: x == Date, lambda x: x == Time) 
		Hall = session[0][-1] 

		Text = f"‚ùå –¢—ã —Ä–∞–∑–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª:\n"
		for i in range(len(Row)):
			schedule.unbook(Date, Time, Row[i], Col[i], username, Hall)
			database.delete_user_history(username, Date, Time, Hall, Row[i], Col[i], Film)
			Text += f' üë• –†—è–¥: {Row[i]}\n üë§ –ú–µ—Å—Ç–æ: {Col[i]}\n\n'
			
		bot.delete_message(call.message.chat.id, call.message.message_id)
		bot.send_message(call.message.chat.id, text=Text)

		database.clean_current_row(username)
		database.clean_current_col(username)
		booking(call)


	elif call.data == 'booking_unbook_part':
		Date = datetime.datetime.strptime(database.get_current_date(username), database.date_format).date()
		Time = datetime.datetime.strptime(database.get_current_time(username), database.time_format).time()
		Film = database.get_current_film(username)
		Row = database.get_current_row(username)
		Col = database.get_current_col(username)
		session = schedule.is_session_exist(lambda x: x == Film, lambda x: x == Date, lambda x: x == Time) 
		Hall = session[0][-1] 

		Text = f'‚ùå –¢—ã —Å–±—Ä–æ—Å–∏–ª –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:\n üë• –†—è–¥: {Row[-1]}\n üë§ –ú–µ—Å—Ç–æ: {Col[-1]}\n\n‚ùå –¢—ã —Ä–∞–∑–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª:\n' 
		for i in range(len(Row)-1):
			schedule.unbook(Date, Time, Row[i], Col[i], username, Hall)
			database.delete_user_history(username, Date, Time, Hall, Row[i], Col[i], Film)
			Text += f'üë• –†—è–¥: {Row[i]}\n üë§ –ú–µ—Å—Ç–æ: {Col[i]}\n\n'

		bot.delete_message(call.message.chat.id, call.message.message_id)
		bot.send_message(call.message.chat.id, text=Text)

		database.clean_current_row(username)
		database.clean_current_col(username)
		booking(call)


	elif call.data == 'choose_row':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		database.clean_current_last_row(username)
		choose_row(call)


	elif call.data == 'choose_col':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		database.clean_current_last_col(username)
		choose_col(call)


	elif call.data == 'rechoose_row':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		database.clean_current_last_col(username)
		database.clean_current_last_row(username)
		choose_row(call)


	elif call.data == 'book_and_choose_row':
		Date = datetime.datetime.strptime(database.get_current_date(username), database.date_format).date()
		Time = datetime.datetime.strptime(database.get_current_time(username), database.time_format).time()
		Film = database.get_current_film(username)
		Row = database.get_current_row(username)
		Col = database.get_current_col(username)
		session = schedule.is_session_exist(lambda x: x == Film, lambda x: x == Date, lambda x: x == Time) 
		Hall = session[0][-1] 

		bot.send_message(call.message.chat.id, f'‚úÖ –¢—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª:\n üë• –†—è–¥: {Row[-1]}\n üë§ –ú–µ—Å—Ç–æ: {Col[-1]}')
		bot.delete_message(call.message.chat.id, call.message.message_id)

		schedule.book(Date, Time, Row[-1], Col[-1], username, Hall)
		database.add_user_history(username, Date, Time, Hall, Row[-1], Col[-1], Film)
		choose_row(call)


	elif call.data == 'book_and_continue':
		Date = datetime.datetime.strptime(database.get_current_date(username), database.date_format).date()
		Time = datetime.datetime.strptime(database.get_current_time(username), database.time_format).time()
		Film = database.get_current_film(username)
		Row = database.get_current_row(username)
		Col = database.get_current_col(username)
		session = schedule.is_session_exist(lambda x: x == Film, lambda x: x == Date, lambda x: x == Time) 
		Hall = session[0][-1] 

		bot.send_message(call.message.chat.id, f'‚úÖ –¢—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª:\n üë• –†—è–¥: {Row[-1]}\n üë§ –ú–µ—Å—Ç–æ: {Col[-1]}')
		bot.delete_message(call.message.chat.id, call.message.message_id)
		schedule.book(Date, Time, Row[-1], Col[-1], username, Hall)
		database.add_user_history(username, Date, Time, Hall, Row[-1], Col[-1], Film)
		data_checking(call)


	elif call.data == 'the_end':
		the_end(call)


	elif call.data == 'cancellation':
		unbook_end(call)


	elif call.data == 'not_rating':
		bot.send_message(call.message.chat.id, f'–ù—É –∏ –ª–∞–¥–Ω–æ, –∑–∞–Ω—É–¥–∞ ü§ì')
		bot.delete_message(call.message.chat.id, call.message.message_id)


	elif call.data == 'delete':
		bot.delete_message(call.message.chat.id, call.message.message_id)
		delete(call)


	elif call.data == 'bye_yes':
		username = '@' + call.from_user.username
		database.delete_user(username)
		bot.send_message(call.message.chat.id, 'üò≠ –¢—ã —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\nü§© –ù—É –∏ –ª–∞–¥–Ω–æ, –µ—Å–ª–∏ —á—Ç–æ, –∑–∞–≥–ª—è–¥—ã–≤–∞–π —Å–Ω–æ–≤–∞')
		bot.delete_message(call.message.chat.id, call.message.message_id)
	

	elif call.data == 'bye_no':
		bot.send_message(call.message.chat.id, 'ü•≥ü•≥ü•≥ü•≥ü•≥ü•≥ü•≥ü•≥ –£—Ä–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞, —Ç—ã –æ—Å—Ç–∞–µ—à—å—Å—è —Å–æ –º–Ω–æ–π')
		bot.delete_message(call.message.chat.id, call.message.message_id)


	elif call.data == 'start_call':
		start_call(call)


	elif call.data[:6] == 'unbook':
		username = '@' + call.from_user.username
		keyboard = telebot.types.InlineKeyboardMarkup()

		Date =datetime.datetime.strptime(call.data[7:17], database.date_format).date()
		Time = datetime.datetime.strptime(call.data[18:23], database.time_format).time()
		
		RowCol = call.data[24:]
		RowCol = RowCol.split('_')
		Row = int(RowCol[0])
		Col = int(RowCol[1])

		session = schedule.is_session_exist(date1 =lambda x: x ==  Date, time1 =lambda x: x == Time) 
		Hall = session[0][-1] 
		Film = session[0][0] 

		schedule.unbook(Date, Time, Row, Col, username, Hall)
		database.delete_user_history(username, Date, Time, Hall, Row, Col, Film)
		bot.delete_message(call.message.chat.id, call.message.message_id)
		keyboard.add(telebot.types.InlineKeyboardButton(text='‚úñÔ∏è  –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –±—Ä–æ–Ω—å  ‚úñÔ∏è', callback_data='cancellation'))
		bot.send_message(call.message.chat.id, f'‚úÖ –ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω',reply_markup=keyboard)
			

	elif call.data[:7] == 'choosen':
		if call.data[8:12] == 'date':
			database.set_current_date(call.data[13:], '@' + call.from_user.username)
			bot.send_message(call.message.chat.id, f'üìÖ –¢—ã –≤—ã–±—Ä–∞–ª –¥–∞—Ç—É: {call.data[13:]}')
			bot.delete_message(call.message.chat.id, call.message.message_id)

			if database.get_current_film(username) == '':
				choose_film(call)
			elif database.get_current_date(username) != '' and database.get_current_film(username) != '':
				choose_time(call)


		if call.data[8:12] == 'time':
			database.set_current_time(call.data[13:], '@' + call.from_user.username)
			Date = datetime.datetime.strptime(database.get_current_date(username), database.date_format).date()
			Time = datetime.datetime.strptime(database.get_current_time(username), database.time_format).time()

			bot.send_message(call.message.chat.id, f'‚è∞ –¢—ã –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è: {call.data[13:]}\nüí∞ –¶–µ–Ω–∞ —Å–µ–∞–Ω—Å–∞: {schedule.price_list(Date, Time)} –≥—Ä–Ω')
			bot.delete_message(call.message.chat.id, call.message.message_id)
			booking(call)


		if call.data[8:12] == 'film':
			database.set_current_film(call.data[13:], '@' + call.from_user.username)
			bot.send_message(call.message.chat.id, f'üé• –¢—ã –≤—ã–±—Ä–∞–ª —Ñ–∏–ª—å–º: {call.data[13:]}')
			bot.delete_message(call.message.chat.id, call.message.message_id)

			keyboard = telebot.types.InlineKeyboardMarkup()
			info = database.information_about_film(call.data[13:])
			text = f"{call.data[13:]}:\n\n üî∏ –ì–æ–¥: {info[0]}\n üî∏ –°—Ç—Ä–∞–Ω–∞: {info[1]}\n üî∏ –†–µ–∂–∏—Å—Å–µ—Ä(—ã): {info[2]}\n üî∏ –ñ–∞–Ω—Ä(—ã): {info[3]}\n üî∏ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info[4]} –º–∏–Ω\n üî∏ –ê–∫—Ç–µ—Ä—ã: {info[5]} –∏ –¥—Ä.\n üî∏ –†–µ–π—Ç–∏–Ω–≥: {info[6]}"
			photo = open(database.photo(call.data[13:]), 'rb')
			if info[7] == '‚Äî':
				bot.send_photo(call.message.chat.id, photo, text)
			else:
				keyboard.add(telebot.types.InlineKeyboardButton(text='üîç   –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ   üîé', url=info[7]))
				bot.send_photo(call.message.chat.id, photo, text, reply_markup=keyboard)

			if database.get_current_date(username) == '':
				choose_date(call)
			elif database.get_current_date(username) != '' and database.get_current_film(username) != '':
				choose_time(call)


		if call.data[8:11] == 'row':
			database.set_current_row(call.data[12:], '@' + call.from_user.username)
			bot.send_message(call.message.chat.id, f'üë• –¢—ã –≤—ã–±—Ä–∞–ª —Ä—è–¥: {call.data[12:]}')
			bot.delete_message(call.message.chat.id, call.message.message_id)
			choose_col(call)


		if call.data[8:11] == 'col':
			database.set_current_col(call.data[12:], '@' + call.from_user.username)
			bot.send_message(call.message.chat.id, f'üë§ –¢—ã –≤—ã–±—Ä–∞–ª –º–µ—Å—Ç–æ: {call.data[12:]}')
			bot.delete_message(call.message.chat.id, call.message.message_id)
			to_book_site(call)


		if call.data[8:14] == 'rating':
			rating = ['1Ô∏è‚É£','2Ô∏è‚É£','3Ô∏è‚É£','4Ô∏è‚É£','5Ô∏è‚É£','6Ô∏è‚É£','7Ô∏è‚É£','8Ô∏è‚É£','9Ô∏è‚É£','üîü']
			if call.data[15:16] != 'd':
				database.update_rating(call.data[15:16], call.data[17:])
				bot.send_message(call.message.chat.id, f'üìà –¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª —Ñ–∏–ª—å–º—É {call.data[17:]} –æ—Ü–µ–Ω–∫—É {rating[int(call.data[15:16])-1]}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç üòò')
			else:
				database.update_rating('10', call.data[17:])
				bot.send_message(call.message.chat.id, f'üìà –¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª —Ñ–∏–ª—å–º—É {call.data[17:]} –æ—Ü–µ–Ω–∫—É {rating[-1]}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç üòò')
			bot.delete_message(call.message.chat.id, call.message.message_id)
		



#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å—Ç–∞—Ä—Ç
def start_call(call) -> None:
	username = '@' + call.from_user.username
	database.clean_current_date(username)
	database.clean_current_film(username)
	database.clean_current_time(username)
	database.clean_current_row(username)
	database.clean_current_col(username)
	main_menu(call)

# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start(message):
	bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è KinoBot, –¥–∞–≤–∞–π –ø–æ–≥—Ä—É–∑–∏–º—Å—è –≤ –º–∏—Ä –∫–∏–Ω–æ –≤–º–µ—Å—Ç–µ! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç—ã –Ω–∞ –ª—é–±–∏–º—ã–µ —Ñ–∏–ª—å–º—ã. –ù–æ –≤–Ω–∞—á–∞–ª–µ –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è, –ø–æ—ç—Ç–æ–º—É —è –≤–Ω–µ—Å—É —Ç–µ–±—è –≤ —Å–≤–æ—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
	if not message.from_user.username:
		bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–∏, –Ω–æ —Ç–≤–æ–µ –∏–º—è @User –Ω–µ –∑–∞–¥–∞–Ω–æ. –ó–∞–¥–∞–π —Å–≤–æ–π username')
		return 
	username = '@' + message.from_user.username

	if database.is_user_exist(username):
		bot.send_message(message.chat.id, '–ü—Ä–æ—Å—Ç–∏, —Å–∫–ª–µ—Ä–æ–∑, —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')

	elif not database.is_user_exist(username):
		database.add_user(message.chat.id, username)
		bot.send_message(message.chat.id, '–í—Å–µ, —Ç—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
	
	database.set_activity(username)
	keyboard = telebot.types.InlineKeyboardMarkup()
	keyboard.add(telebot.types.InlineKeyboardButton(text='üòÅ   –îAAA   üòÅ', callback_data='main_menu'))
	keyboard.add(telebot.types.InlineKeyboardButton(text='üôÉ   –î–∞   üôÉ', callback_data='main_menu'))
	bot.send_message(message.chat.id, text="–í –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ –µ—Å—Ç—å 5Ô∏è‚É£ –∑–∞–ª–æ–≤: –°–∏–Ω–∏–π, –ó–µ–ª–µ–Ω—ã–π, –ö—Ä–∞—Å–Ω—ã–π, –û—Ä–∞–Ω–∂–µ–≤—ã–π, –ñ–µ–ª—Ç—ã–π.\n–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–±–æ–π –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã –≤–∞—Ä–∏—Ä—É–µ—Ç—Å—è —Ü–µ–Ω–∞:\n üî∫ –ü–Ω - –ü—Ç 9:00 - 18:00:    60 –≥—Ä–Ω\n üî∫ –ü–Ω - –ü—Ç –ø–æ–∑–∂–µ 18:00:  70 –≥—Ä–Ω\n üî∫ –°–± - –í—Å 9:00 - 18:00:    70 –≥—Ä–Ω\n üî∫ –°–± - –í—Å –ø–æ–∑–∂–µ 18:00:   80 –≥—Ä–Ω\n\n–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?", reply_markup=keyboard)


# –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–º—Å
@bot.message_handler(content_types=['text'])
def answerTheMessage(message):
	bot.send_message(message.chat.id, '‚òπÔ∏è –°–ª–µ–¥—É–π –º–æ–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def start_def():
	for user in database.unactive_users(100):
		try:
			bot.send_message(database.getID(user), '–¢—ã –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –∫–æ –º–Ω–µ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ 100 –¥–Ω–µ–π, —è —É–¥–∞–ª–∏–ª —Ç–µ–±—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
		except telebot.apihelper.ApiException:
			pass
		database.delete_user(user)

	for user in database.unactive_users(30): #–µ—Å–ª–∏ —Ç—ã –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –±–æ–ª—å—à–µ 30 –¥–Ω–µ–π
		if (datetime.datetime.now() - database.get_alert(user)).days >= 30: #–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –±–æ–ª—å—à–µ 30 –¥–Ω–µ–π
			delta = datetime.datetime.now() - database.get_activity(user)
			try:
				bot.send_message(database.get_user_id(user), f'–¢—ã –Ω–µ –∑–∞—Ö–æ–¥–∏–ª –∫–æ –º–Ω–µ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {delta.days} –¥–Ω–µ–π')
				keyboard = telebot.types.InlineKeyboardMarkup()
				keyboard.add(telebot.types.InlineKeyboardButton(text='üòê   –£–¥–∞–ª–∏ –º–µ–Ω—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö   üòê', callback_data='delete'))
				bot.send_message(database.get_user_id(user), '–Ø —É–¥–∞–ª—é —Ç–µ–±—è –∏–∑ —Å–≤–æ–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —Ç—ã –ø–æ–¥–æ–ª–≥—É –Ω–µ –±—É–¥–µ—à—å –º–µ–Ω—è –Ω–∞–≤–µ—â–∞—Ç—å', reply_markup=keyboard)
			except telebot.apihelper.ApiException:
				database.delete_user(user)
			else:
				database.set_alert(user)

	threading.Timer(60, start_def).start()


# –§–∏–ª—å–º—ã, —á—Ç–æ –±—É–¥—É—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
def novelty():
	keyboard = telebot.types.InlineKeyboardMarkup()
	if datetime.datetime.now().time().strftime(database.time_format) == datetime.time(16,46).strftime(database.time_format):
		data =[]
		for user in database.Users(): 
			List = schedule.novelty()

			Text = '–í –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –µ—Å—Ç—å —Å–µ–∞–Ω—Å—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∏–ª—å–º—ã, —Ç–∞–∫–∏–µ –∫–∞–∫\n'
			for row in range(5):
				Text += f' üé• {List[row]}\n'
			Text += '–∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ\n–°–∫–æ—Ä–µ–µ –Ω–∞–∂–∏–º–∞–π /start'
			bot.send_message(database.get_user_id(user), Text)

	threading.Timer(60, novelty).start()


start_def()
novelty()
schedule.clean_halls()
schedule.clean_schedule()

print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
bot.polling(none_stop = True, interval = 0)
# python C:\\Users\\–°–≤–µ—Ç–∞\\Desktop\\Bot\\bot.py	
